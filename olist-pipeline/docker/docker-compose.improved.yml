version: '3.8'

x-common-env: &common-env
  # AWS/MinIO Configuration
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
  S3_BUCKET: ${S3_BUCKET}
  S3_PREFIX: ${S3_PREFIX}
  S3_ENDPOINT: ${S3_ENDPOINT}
  
  # Airflow Configuration
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
  AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
  AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
  # PostgreSQL connection for DAGs
  AIRFLOW_CONN_POSTGRES_DEFAULT: postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  
  # Custom paths
  SQL_DIR: /opt/airflow/sql
  DAGS_DIR: /opt/airflow/dags
  
  # Slack (optional)
  SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL:-}

x-airflow-common: &airflow-common
  image: apache/airflow:2.9.3-python3.12
  environment:
    <<: *common-env
  volumes:
    - ../dag:/opt/airflow/dags
    - ../sql:/opt/airflow/sql
    - ../tests:/opt/airflow/tests
    - airflow-logs:/opt/airflow/logs
    - airflow-plugins:/opt/airflow/plugins
    - ../../data:/opt/airflow/data
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy
    minio:
      condition: service_healthy

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data/pgdata
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    ports:
      - "5432:5432"

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console

  # MinIO Setup (Create buckets and upload data)
  minio-setup:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ../../data/raw:/data/raw:ro
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to be ready...';
      until mc config host add myminio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY}; do
        echo 'MinIO not ready, waiting...';
        sleep 2;
      done;
      echo 'Creating bucket...';
      mc mb myminio/${S3_BUCKET} --ignore-existing;
      echo 'Uploading data...';
      mc cp --recursive /data/raw/ myminio/${S3_BUCKET}/raw/;
      echo 'MinIO setup completed!';
      "

  # Airflow Database Initialization
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo "AIRFLOW_UID not set, using default 50000"
          export AIRFLOW_UID=50000
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo "WARNING: Not enough memory available for Docker."
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo "WARNING: Not enough CPUS available for Docker."
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo "WARNING: Not enough Disk space available for Docker."
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo "WARNING: You have not enough resources to run Airflow (see above)!"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_ADMIN_USERNAME:-admin}
      _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD:-StrongPassword123!}
    user: "0:0"
    volumes:
      - ../dag:/sources/dags
      - ../sql:/sources/sql
      - airflow-logs:/sources/logs
      - airflow-plugins:/sources/plugins

  # Airflow Webserver
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # Airflow Scheduler
  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  # Airflow Worker (for CeleryExecutor, optional)
  # airflow-worker:
  #   <<: *airflow-common
  #   command: celery worker
  #   healthcheck:
  #     test:
  #       - "CMD-SHELL"
  #       - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   environment:
  #     <<: *common-env
  #     DUMB_INIT_SETSID: "0"
  #   restart: always
  #   depends_on:
  #     airflow-init:
  #       condition: service_completed_successfully

  # Redis (for CeleryExecutor, optional)
  # redis:
  #   image: redis:7-alpine
  #   expose:
  #     - 6379
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 30s
  #     retries: 50
  #     start_period: 30s
  #   restart: always

volumes:
  postgres-db-volume:
  minio-data:
  airflow-logs:
  airflow-plugins:

networks:
  default:
    name: olist-pipeline-network
